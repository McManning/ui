{"version":3,"sources":["global.js","components/enhanced-input.js","components/lookup.js","vendor/datepicker.js"],"names":[],"mappingsnrTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ui.js","sourcesContent":["\n/**\n * Global behaviors applied to ORIS UI components\n *\n * Be VERY careful when editing these. You do not want to\n * introduce new behavior that doesn't make sense for every\n * application that uses your components.\n */\n\n// No code! Woo!\n","/**\r\n * Enhanced Inputs\r\n *\r\n * Adds a length counter widget to inputs (textareas, input type=\"text\")\r\n *\r\n * Usage:\r\n *\r\n *  $('textarea').EnhancedInput();\r\n *\r\n * Also accepts Bootstrap-style data attributes:\r\n *  data-provide=\"enhanced-input\" to enable on an input\r\n *\r\n */\r\n;(function ($) {\r\n    var PLUGIN_NAME = 'enhanced-input';\r\n    var VERSION = '1.0.0';\r\n\r\n    // Events on the input/textarea that will update the counter\r\n    var INPUT_EVENTS = 'keyup keydown focus input paste';\r\n\r\n    var DEFAULTS = {\r\n        // Not applicable\r\n    };\r\n\r\n    var EnhancedInput = function(element, options) {\r\n        $.data(element, PLUGIN_NAME, this);\r\n\r\n        this.o = options;\r\n        this.element = $(element);\r\n\r\n        // Make sure there's a maxlength (required attr)\r\n        if (!this.element.attr('maxlength')) {\r\n            $.error(\r\n                'You must specify maxlength for inputs using $.EnhancedInput'\r\n            );\r\n        }\r\n\r\n        this._setupDOM();\r\n        this._attachEvents();\r\n\r\n        // Setup initial count\r\n        this._change();\r\n    };\r\n\r\n    EnhancedInput.prototype = {\r\n        constructor: EnhancedInput,\r\n\r\n        _attachEvents: function() {\r\n            this.element.on(INPUT_EVENTS, $.proxy(this._change, this));\r\n        },\r\n\r\n        _setupDOM: function() {\r\n\r\n            // Add the counter to the DOM\r\n            this.counter = $('<div class=\"enhanced-input-counter\"/>');\r\n            this.element.after(this.counter);\r\n        },\r\n\r\n        _change: function() {\r\n\r\n            // Update textarea counter to reflect number of changes.\r\n            // Note that Chrome counts \\r\\n as 1 character in JS, but\r\n            // two when dealing with textarea[maxlength]. So we need\r\n            // to do some math changes to get this to count properly.\r\n            var length = this.element.val().replace(\r\n                /\\r(?!\\n)|\\n(?!\\r)/g, \r\n                \"\\r\\n\"\r\n            ).length;\r\n\r\n            this.counter.html(\r\n                length + '/' + \r\n                this.element.attr('maxlength')\r\n            );\r\n        }\r\n    };\r\n\r\n    ////////////////////////////\r\n    // jQuery Plugin Interface\r\n    ////////////////////////////\r\n\r\n    var plugin = function(option) {\r\n        var args = Array.apply(null, arguments);\r\n        args.shift();\r\n\r\n        var ret;\r\n        this.each(function () {\r\n            var $this = $(this),\r\n                data = $this.data(PLUGIN_NAME),\r\n                options = typeof option === 'object' && option;\r\n\r\n            if (!data) {\r\n                // Options priority: js args, data-api, defaults\r\n                var opts = $.extend({}, DEFAULTS, $this.data(), options);\r\n\r\n                data = new EnhancedInput(this, opts);\r\n                $this.data('', data);\r\n                ret = data;\r\n            }\r\n\r\n            if (typeof option === 'string' && typeof data[option] === 'function') {\r\n                ret = data[option].apply(data, args);\r\n            }\r\n        });\r\n\r\n        if (ret === undefined || ret instanceof EnhancedInput) {\r\n            return this;\r\n        }\r\n\r\n        return ret;\r\n    };\r\n\r\n    $.fn[PLUGIN_NAME] = plugin;\r\n    $.fn[PLUGIN_NAME].defaults = DEFAULTS;\r\n    $.fn[PLUGIN_NAME].Constructor = EnhancedInput;\r\n    $.fn[PLUGIN_NAME].version = VERSION;\r\n\r\n    // Fire off construction of any lookups using data-api immediately\r\n    $(document).on(\r\n        'click.'+PLUGIN_NAME+'.data-api',\r\n        '[data-provide=\"'+PLUGIN_NAME+'\"]',\r\n        function (e) {\r\n            var $this = $(this);\r\n            if ($this.data(PLUGIN_NAME)) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            plugin.call($this, {});\r\n        });\r\n\r\n}( jQuery ));\r\n","/**\n * Simple ass AJAX lookup\n *\n * Compatible with Bootstrap 4.0.0a4\n *\n * Usage:\n *\n *  $('.form-lookup').Lookup({\n *      url: 'source url'\n *  });\n *\n * Also accepts Bootstrap-style data attributes:\n *  data-provide=\"lookup\" to enable on an input\n *  data-url=\"https://...\" to bind a url\n *  ... etc\n *\n * Note that this expects the backend to conform to JSON-API spec.\n *\n * Upstream query will be:\n *      GET {url}?q={term}\n *      Accept: application/vnd.api+json\n *\n * Downstream responses expect to be formatted as:\n *      200 OK\n *      Content-Type: application/vnd.api+json\n *      {\n *           \"meta\": {\n *               \"total\": 55\n *           },\n *           \"data\": [\n *               {\n *                   \"type\": \"person\",\n *                   \"id\": \"200275154\",\n *                   \"attributes\": {\n *                       \"title\": \"McManning, Chase\"\n *                   }\n *               }\n *           ]\n *       }\n *\n * It can also supply an access token to the ORIS API through the\n * `token` parameter. Just make sure your token has the correct\n * permissions before attempting to perform lookup against an endpoint.\n */\n;(function ($) {\n\n    // var NAME = 'lookup';\n    // var DATA_KEY = 'lookup';\n    // var EVENT_KEY = '.lookup';\n    // var DATA_API_KEY = '.data-api';\n    // var JQUERY_NO_CONFLICT = $.fn[NAME];\n\n    // var EVENTS = {\n    //     CLICK_DATA_API: 'click'+EVENT_KEY+DATA_API_KEY\n    // };\n\n    var VERSION = '1.0.0';\n\n    var DEFAULTS = {\n        url: null,                      // Endpoint URL to request AJAX data from\n\n        display: 'attributes.title',    // AJAX object attribute to display in the input upon select\n\n        store: 'id',                    // AJAX object attribute to submit alongside the form.\n                                        // If null, whatever is in the lookup input will be\n                                        // submitted with the form.\n\n        threshold: 3,                   // Minimum characters required before a search is started\n\n        readonly: true,                 // Whether to go readonly once something is selected\n\n        token: null                     // ORIS-API bearer token, if known.\n    };\n\n    /**\n     * Utility function to resolve dot notation paths to JSON records.\n     *\n     * Source: http://stackoverflow.com/a/6394168\n     */\n    function _resolvePath(path, obj) {\n        return path.split('.').reduce(function(o, i) { return o[i]; }, obj);\n    }\n\n    var Lookup = function(element, options) {\n        $.data(element, 'lookup', this);\n\n        this.o = options;\n        this.element = $(element);\n\n        // Configuration and whatnot\n        console.log(options.url);\n\n        this._setupDOM();\n        this._attachEvents();\n    };\n\n    Lookup.prototype = {\n        constructor: Lookup,\n\n        _attachEvents: function() {\n            this.element.on('keyup', $.proxy(this._change, this));\n            this.results.on('click', 'a', $.proxy(this._select, this));\n            this.addon.on('click', $.proxy(this.clear, this));\n        },\n\n        _setupDOM: function() {\n\n            var $parent = this.element.parent();\n\n            // Setup a hidden input for storing selection data\n            if (this.o.store) {\n                var name = this.element.attr('name');\n                this.store = $('<input type=\"hidden\" name=\"'+name+'\">');\n\n                this.element.attr('name', '');\n                $parent.after(this.store);\n            }\n\n            this.addon = this.element.next('.input-group-addon');\n\n            this.results = $('<div class=\"list-group lookup-results\"/>');\n            $parent.after(this.results);\n        },\n\n        _change: function() {\n\n            // Ignore change events if we're readonly\n            if (this.element.is('[readonly]')) {\n                return;\n            }\n\n            var term = this.element.val();\n            if (term.length >= this.o.threshold) {\n                this.search(term);\n            } else {\n                this.results.html('');\n            }\n        },\n\n        _select: function(e) {\n            var json = $(e.target).data('json');\n\n            this.element.val(_resolvePath(this.o.display, json));\n            this.results.html('');\n\n            this.element.focus();\n\n            // Readonly mode enabled? Disable the input\n            if (this.o.readonly) {\n                this.element.attr('readonly', 'readonly');\n                this.addon.html(\n                    '<i class=\"fa fa-close\" aria-hidden=\"true\"></i>'\n                );\n            }\n\n            // Store key in hidden input, if we choose to do so\n            if (this.o.store) {\n                this.store.val(_resolvePath(this.o.store, json));\n            }\n\n            e.preventDefault();\n            return false;\n        },\n\n        clear: function(e) {\n            this.results.html('');\n            this.element.val('');\n            this.element.focus();\n\n            if (this.o.readonly) {\n                this.element.removeAttr('readonly');\n                this.addon.html(\n                    '<i class=\"fa fa-search\" aria-hidden=\"true\"></i>'\n                );\n            }\n\n            if (this.o.store) {\n                this.store.val('');\n            }\n\n            if (e) {\n                e.preventDefault();\n            }\n\n            return false;\n        },\n\n        search: function(term) {\n\n            this.addon.html(\n                '<i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>'\n            );\n\n            // TODO: Replace mock with actual ajax\n            var self = this;\n            setTimeout(function() {\n\n                self.addon.html(\n                    '<i class=\"fa fa-search\" aria-hidden=\"true\"></i>'\n                );\n\n                self._displayResults({\n                    meta: {\n                        total: 56\n                    },\n                    data: [\n                        {\n                            type: \"person\",\n                            id: \"junk\",\n                            attributes: {\n                                title: term\n                            }\n                        },\n                        {\n                            type: \"person\",\n                            id: \"200275154\",\n                            attributes: {\n                                title: \"McManning, Chase\"\n                            }\n                        },\n                        {\n                            type: \"person\",\n                            id: \"123456789\",\n                            attributes: {\n                                title: \"Ray, John\"\n                            }\n                        }\n                    ]\n                });\n            }, 1000);\n        },\n\n        _displayResults: function(json) {\n            this.results.html('');\n\n            for (var i = 0; i < json.data.length; i++) {\n                this.results.append(\n                    $('<a href=\"#\" class=\"list-group-item list-group-action\">' +\n                        _resolvePath(this.o.display, json.data[i]) +\n                        '</a>'\n                    ).data('json', json.data[i])\n                );\n            }\n\n            if (json.meta && json.meta.total) {\n                this.results.append(\n                    '<div class=\"lookup-total\">There are <strong>' +\n                    (json.meta.total - json.data.length) +\n                    '</strong> additional results. Please narrow your search</div>'\n                );\n            }\n        }\n    };\n\n    ////////////////////////////\n    // jQuery Plugin Interface\n    ////////////////////////////\n\n    var plugin = function(option) {\n        var args = Array.apply(null, arguments);\n        args.shift();\n\n        var ret;\n        this.each(function () {\n            var $this = $(this),\n                data = $this.data('lookup'),\n                options = typeof option === 'object' && option;\n\n            if (!data) {\n                // Options priority: js args, data-api, defaults\n                var opts = $.extend({}, DEFAULTS, $this.data(), options);\n\n                data = new Lookup(this, opts);\n                $this.data('', data);\n                ret = data;\n            }\n\n            if (typeof option === 'string' && typeof data[option] === 'function') {\n                ret = data[option].apply(data, args);\n            }\n        });\n\n        if (ret === undefined || ret instanceof Lookup) {\n            return this;\n        }\n\n        return ret;\n    };\n\n    $.fn.lookup = plugin;\n    $.fn.lookup.defaults = DEFAULTS;\n    $.fn.lookup.Constructor = Lookup;\n    $.fn.lookup.version = VERSION;\n\n    // Fire off construction of any lookups using data-api immediately\n    $(document).on(\n        'click.lookup.data-api',\n        '[data-provide=\"lookup\"]',\n        function (e) {\n            var $this = $(this);\n            if ($this.data('lookup')) {\n                return;\n            }\n\n            e.preventDefault();\n            plugin.call($this, {});\n        });\n\n}( jQuery ));\n","/**\n * Apply global configuration changes to bootstrap-datepicker\n */\n$.fn.datepicker.defaults.format = 'mm/dd/yyyy';\n$.fn.datepicker.defaults.maxViewMode = 2; // years\n$.fn.datepicker.defaults.orientation = 'bottom auto';\n$.fn.datepicker.defaults.autoclose = true;\n\n// Ensure any addon UI components (usually an icon at the right) trigger\n// the actual date input. Note that if you setup bootstrap-datepicker\n// on your own without utilizing it's data-api, you'll need to bind\n// this event yourself.\n$(function() {\n\n    // Note that we use document binding so late created components\n    // through AJAX/PJAX will still be bound as well.\n    $(document).on('click', 'input[data-provide=\"datepicker\"] + .input-group-addon', function() {\n        $(this).siblings('input').focus();\n    });\n});\n"]}